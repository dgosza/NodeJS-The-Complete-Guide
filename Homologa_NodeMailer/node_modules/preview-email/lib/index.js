"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const fs = require('fs');

const os = require('os');

const path = require('path');

const dayjs = require('dayjs');

const debug = require('debug')('preview-email');

const nodemailer = require('nodemailer');

const open = require('open');

const pify = require('pify');

const pug = require('pug');

const uuid = require('uuid');

const {
  simpleParser
} = require('mailparser');

const writeFile = pify(fs.writeFile);
const transport = nodemailer.createTransport({
  streamTransport: true,
  buffer: true
});
const templateFilePath = path.join(__dirname, '..', 'template.pug');
const renderFilePromise = pify(pug.renderFile);

const previewEmail = async (message, options) => {
  options = _objectSpread({
    dir: os.tmpdir(),
    id: uuid.v4(),
    open: {
      wait: false
    },
    template: templateFilePath
  }, options);
  debug('message', message, 'options', options);
  if (typeof message !== 'object') throw new Error('Message argument is required');
  const res = await transport.sendMail(message);
  const parsed = await simpleParser(res.message);
  const html = await renderFilePromise(options.template, Object.assign(parsed, {
    cache: true,
    pretty: true,
    dayjs
  }));
  const filePath = `${options.dir}/${options.id}.html`;
  debug('filePath', filePath);
  await writeFile(filePath, html);
  if (options.open) await open(filePath, options.open);
  return `file://${filePath}`;
};

module.exports = previewEmail;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJvcyIsInBhdGgiLCJkYXlqcyIsImRlYnVnIiwibm9kZW1haWxlciIsIm9wZW4iLCJwaWZ5IiwicHVnIiwidXVpZCIsInNpbXBsZVBhcnNlciIsIndyaXRlRmlsZSIsInRyYW5zcG9ydCIsImNyZWF0ZVRyYW5zcG9ydCIsInN0cmVhbVRyYW5zcG9ydCIsImJ1ZmZlciIsInRlbXBsYXRlRmlsZVBhdGgiLCJqb2luIiwiX19kaXJuYW1lIiwicmVuZGVyRmlsZVByb21pc2UiLCJyZW5kZXJGaWxlIiwicHJldmlld0VtYWlsIiwibWVzc2FnZSIsIm9wdGlvbnMiLCJkaXIiLCJ0bXBkaXIiLCJpZCIsInY0Iiwid2FpdCIsInRlbXBsYXRlIiwiRXJyb3IiLCJyZXMiLCJzZW5kTWFpbCIsInBhcnNlZCIsImh0bWwiLCJPYmplY3QiLCJhc3NpZ24iLCJjYWNoZSIsInByZXR0eSIsImZpbGVQYXRoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLE1BQU1BLEVBQUUsR0FBR0MsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTUMsRUFBRSxHQUFHRCxPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxNQUFNRSxJQUFJLEdBQUdGLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUVBLE1BQU1HLEtBQUssR0FBR0gsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTUksS0FBSyxHQUFHSixPQUFPLENBQUMsT0FBRCxDQUFQLENBQWlCLGVBQWpCLENBQWQ7O0FBQ0EsTUFBTUssVUFBVSxHQUFHTCxPQUFPLENBQUMsWUFBRCxDQUExQjs7QUFDQSxNQUFNTSxJQUFJLEdBQUdOLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU1PLElBQUksR0FBR1AsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTVEsR0FBRyxHQUFHUixPQUFPLENBQUMsS0FBRCxDQUFuQjs7QUFDQSxNQUFNUyxJQUFJLEdBQUdULE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU07QUFBRVUsRUFBQUE7QUFBRixJQUFtQlYsT0FBTyxDQUFDLFlBQUQsQ0FBaEM7O0FBRUEsTUFBTVcsU0FBUyxHQUFHSixJQUFJLENBQUNSLEVBQUUsQ0FBQ1ksU0FBSixDQUF0QjtBQUVBLE1BQU1DLFNBQVMsR0FBR1AsVUFBVSxDQUFDUSxlQUFYLENBQTJCO0FBQzNDQyxFQUFBQSxlQUFlLEVBQUUsSUFEMEI7QUFFM0NDLEVBQUFBLE1BQU0sRUFBRTtBQUZtQyxDQUEzQixDQUFsQjtBQUtBLE1BQU1DLGdCQUFnQixHQUFHZCxJQUFJLENBQUNlLElBQUwsQ0FBVUMsU0FBVixFQUFxQixJQUFyQixFQUEyQixjQUEzQixDQUF6QjtBQUVBLE1BQU1DLGlCQUFpQixHQUFHWixJQUFJLENBQUNDLEdBQUcsQ0FBQ1ksVUFBTCxDQUE5Qjs7QUFFQSxNQUFNQyxZQUFZLEdBQUcsT0FBT0MsT0FBUCxFQUFnQkMsT0FBaEIsS0FBNEI7QUFDL0NBLEVBQUFBLE9BQU87QUFDTEMsSUFBQUEsR0FBRyxFQUFFdkIsRUFBRSxDQUFDd0IsTUFBSCxFQURBO0FBRUxDLElBQUFBLEVBQUUsRUFBRWpCLElBQUksQ0FBQ2tCLEVBQUwsRUFGQztBQUdMckIsSUFBQUEsSUFBSSxFQUFFO0FBQUVzQixNQUFBQSxJQUFJLEVBQUU7QUFBUixLQUhEO0FBSUxDLElBQUFBLFFBQVEsRUFBRWI7QUFKTCxLQUtGTyxPQUxFLENBQVA7QUFPQW5CLEVBQUFBLEtBQUssQ0FBQyxTQUFELEVBQVlrQixPQUFaLEVBQXFCLFNBQXJCLEVBQWdDQyxPQUFoQyxDQUFMO0FBRUEsTUFBSSxPQUFPRCxPQUFQLEtBQW1CLFFBQXZCLEVBQ0UsTUFBTSxJQUFJUSxLQUFKLENBQVUsOEJBQVYsQ0FBTjtBQUVGLFFBQU1DLEdBQUcsR0FBRyxNQUFNbkIsU0FBUyxDQUFDb0IsUUFBVixDQUFtQlYsT0FBbkIsQ0FBbEI7QUFFQSxRQUFNVyxNQUFNLEdBQUcsTUFBTXZCLFlBQVksQ0FBQ3FCLEdBQUcsQ0FBQ1QsT0FBTCxDQUFqQztBQUVBLFFBQU1ZLElBQUksR0FBRyxNQUFNZixpQkFBaUIsQ0FDbENJLE9BQU8sQ0FBQ00sUUFEMEIsRUFFbENNLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjSCxNQUFkLEVBQXNCO0FBQ3BCSSxJQUFBQSxLQUFLLEVBQUUsSUFEYTtBQUVwQkMsSUFBQUEsTUFBTSxFQUFFLElBRlk7QUFHcEJuQyxJQUFBQTtBQUhvQixHQUF0QixDQUZrQyxDQUFwQztBQVNBLFFBQU1vQyxRQUFRLEdBQUksR0FBRWhCLE9BQU8sQ0FBQ0MsR0FBSSxJQUFHRCxPQUFPLENBQUNHLEVBQUcsT0FBOUM7QUFDQXRCLEVBQUFBLEtBQUssQ0FBQyxVQUFELEVBQWFtQyxRQUFiLENBQUw7QUFDQSxRQUFNNUIsU0FBUyxDQUFDNEIsUUFBRCxFQUFXTCxJQUFYLENBQWY7QUFFQSxNQUFJWCxPQUFPLENBQUNqQixJQUFaLEVBQWtCLE1BQU1BLElBQUksQ0FBQ2lDLFFBQUQsRUFBV2hCLE9BQU8sQ0FBQ2pCLElBQW5CLENBQVY7QUFFbEIsU0FBUSxVQUFTaUMsUUFBUyxFQUExQjtBQUNELENBakNEOztBQW1DQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCcEIsWUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBvcyA9IHJlcXVpcmUoJ29zJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG5jb25zdCBkYXlqcyA9IHJlcXVpcmUoJ2RheWpzJyk7XG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3ByZXZpZXctZW1haWwnKTtcbmNvbnN0IG5vZGVtYWlsZXIgPSByZXF1aXJlKCdub2RlbWFpbGVyJyk7XG5jb25zdCBvcGVuID0gcmVxdWlyZSgnb3BlbicpO1xuY29uc3QgcGlmeSA9IHJlcXVpcmUoJ3BpZnknKTtcbmNvbnN0IHB1ZyA9IHJlcXVpcmUoJ3B1ZycpO1xuY29uc3QgdXVpZCA9IHJlcXVpcmUoJ3V1aWQnKTtcbmNvbnN0IHsgc2ltcGxlUGFyc2VyIH0gPSByZXF1aXJlKCdtYWlscGFyc2VyJyk7XG5cbmNvbnN0IHdyaXRlRmlsZSA9IHBpZnkoZnMud3JpdGVGaWxlKTtcblxuY29uc3QgdHJhbnNwb3J0ID0gbm9kZW1haWxlci5jcmVhdGVUcmFuc3BvcnQoe1xuICBzdHJlYW1UcmFuc3BvcnQ6IHRydWUsXG4gIGJ1ZmZlcjogdHJ1ZVxufSk7XG5cbmNvbnN0IHRlbXBsYXRlRmlsZVBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4nLCAndGVtcGxhdGUucHVnJyk7XG5cbmNvbnN0IHJlbmRlckZpbGVQcm9taXNlID0gcGlmeShwdWcucmVuZGVyRmlsZSk7XG5cbmNvbnN0IHByZXZpZXdFbWFpbCA9IGFzeW5jIChtZXNzYWdlLCBvcHRpb25zKSA9PiB7XG4gIG9wdGlvbnMgPSB7XG4gICAgZGlyOiBvcy50bXBkaXIoKSxcbiAgICBpZDogdXVpZC52NCgpLFxuICAgIG9wZW46IHsgd2FpdDogZmFsc2UgfSxcbiAgICB0ZW1wbGF0ZTogdGVtcGxhdGVGaWxlUGF0aCxcbiAgICAuLi5vcHRpb25zXG4gIH07XG4gIGRlYnVnKCdtZXNzYWdlJywgbWVzc2FnZSwgJ29wdGlvbnMnLCBvcHRpb25zKTtcblxuICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09ICdvYmplY3QnKVxuICAgIHRocm93IG5ldyBFcnJvcignTWVzc2FnZSBhcmd1bWVudCBpcyByZXF1aXJlZCcpO1xuXG4gIGNvbnN0IHJlcyA9IGF3YWl0IHRyYW5zcG9ydC5zZW5kTWFpbChtZXNzYWdlKTtcblxuICBjb25zdCBwYXJzZWQgPSBhd2FpdCBzaW1wbGVQYXJzZXIocmVzLm1lc3NhZ2UpO1xuXG4gIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJGaWxlUHJvbWlzZShcbiAgICBvcHRpb25zLnRlbXBsYXRlLFxuICAgIE9iamVjdC5hc3NpZ24ocGFyc2VkLCB7XG4gICAgICBjYWNoZTogdHJ1ZSxcbiAgICAgIHByZXR0eTogdHJ1ZSxcbiAgICAgIGRheWpzXG4gICAgfSlcbiAgKTtcblxuICBjb25zdCBmaWxlUGF0aCA9IGAke29wdGlvbnMuZGlyfS8ke29wdGlvbnMuaWR9Lmh0bWxgO1xuICBkZWJ1ZygnZmlsZVBhdGgnLCBmaWxlUGF0aCk7XG4gIGF3YWl0IHdyaXRlRmlsZShmaWxlUGF0aCwgaHRtbCk7XG5cbiAgaWYgKG9wdGlvbnMub3BlbikgYXdhaXQgb3BlbihmaWxlUGF0aCwgb3B0aW9ucy5vcGVuKTtcblxuICByZXR1cm4gYGZpbGU6Ly8ke2ZpbGVQYXRofWA7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHByZXZpZXdFbWFpbDtcbiJdfQ==